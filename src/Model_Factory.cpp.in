/*
    This file is part of ELMO-2.

    ELMO-2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ELMO-2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with ELMO-2.  If not, see <http://www.gnu.org/licenses/>.
*/

/*!
    @file Model_Factory.cpp
    @brief Contains the Model_Factory class; a factory class for initialisation
    of models. This file is processed by CMake as some of the contents are
    generated at compile time.
    @author Scott Egerton
    @date 2017-2018
    @copyright GNU Affero General Public License Version 3+
*/

#include <memory>        // for make...
#include <stdexcept>     // for inva...
#include <string>        // for oper...
#include <unordered_map> // for unor...

#include "@CMAKE_CURRENT_SOURCE_DIR@/Model_Factory.hpp"

#include "@CMAKE_CURRENT_SOURCE_DIR@/Model.hpp"
@MODEL_FACTORY_INCLUDES@

namespace ELMO2
{
namespace Internal
{
// Forward Declarations
class Coefficients;
class Execution;

const std::unordered_map<std::string, bool>
    ELMO2::Internal::Model_Factory::m_all_models = {@MODEL_FACTORY_LIST@};

std::unique_ptr<ELMO2::Internal::Model>
ELMO2::Internal::Model_Factory::Create_Model(
    const std::string& p_model_type,
    const ELMO2::Internal::Execution& p_execution,
    const ELMO2::Internal::Coefficients& p_coefficients)
{
    std::unique_ptr<ELMO2::Internal::Model> model;
    @MODEL_FACTORY_CODE@

    if (!model->Find_Interaction_Terms())
    {
        throw std::logic_error("Model was not provided with correct "
                               "interaction terms by the Coefficients file.");
    }

    throw std::invalid_argument("Unknown Model type");
}

const std::unordered_map<std::string, bool>&
ELMO2::Internal::Model_Factory::Get_All_Models()
{
    return m_all_models;
}
} // namespace Internal
} // namespace ELMO2
